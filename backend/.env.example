# OpenDeck Backend Environment Configuration
# Copy this file to .env and fill in the values

# ============================================================================
# Application Configuration
# ============================================================================

# Environment: development, staging, production
ENV=development

# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Secret key for application security (generate with: openssl rand -base64 32)
SECRET_KEY=your-secret-key-change-in-production

# API version prefix
API_V1_PREFIX=/api/v1

# ============================================================================
# Database Configuration
# ============================================================================

# Database backend: postgres (DynamoDB support planned for Phase 3)
DB_BACKEND=postgres

# PostgreSQL connection string
# Format: postgresql://username:password@host:port/database
DATABASE_URL=postgresql://opendeck_user:opendeck_pass@localhost:5432/opendeck

# DynamoDB Configuration (AWS - Phase 3, currently unused)
# AWS_REGION=us-east-1
# DYNAMO_DECKS_TABLE=opendeck-decks
# DYNAMO_CARDS_TABLE=opendeck-cards
# DYNAMO_USERS_TABLE=opendeck-users
# DYNAMO_DOCS_TABLE=opendeck-documents

# ============================================================================
# JWT Authentication
# ============================================================================

# JWT secret key for token signing (generate with: openssl rand -base64 32)
JWT_SECRET_KEY=your-jwt-secret-key-change-in-production

# JWT algorithm (recommended: HS256)
JWT_ALGORITHM=HS256

# Access token expiration time in minutes (default: 30)
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Refresh token expiration time in days (default: 7)
REFRESH_TOKEN_EXPIRE_DAYS=7

# ============================================================================
# CORS Configuration
# ============================================================================

# Allowed origins for CORS (comma-separated)
# Development: http://localhost:4200,http://localhost:3000
# Production: https://yourdomain.com
ALLOWED_ORIGINS=http://localhost:4200,http://localhost:3000

# ============================================================================
# AI Services (Phase 2 - Document Processing & Flashcard Generation)
# Required for document upload and AI flashcard generation
# ============================================================================

# AI Provider Selection
# Options: 'openai', 'anthropic', 'ollama'
# - openai: Uses OpenAI GPT models (requires API key, costs per request)
# - anthropic: Uses Anthropic Claude models (requires API key, costs per request)
# - ollama: Uses local Ollama models (free, runs locally, requires Ollama installed)
AI_PROVIDER=openai

# OpenAI Configuration
# Get API key from: https://platform.openai.com/api-keys
# Supported models: gpt-4, gpt-4-turbo, gpt-3.5-turbo
OPENAI_API_KEY=sk-your-openai-api-key-here
OPENAI_MODEL=gpt-4

# Anthropic Configuration
# Get API key from: https://console.anthropic.com/
# Supported models: claude-3-opus-20240229, claude-3-sonnet-20240229, claude-3-haiku-20240307
ANTHROPIC_API_KEY=sk-ant-your-anthropic-api-key-here
ANTHROPIC_MODEL=claude-3-sonnet-20240229

# Ollama Configuration (Local AI Models)
# Install Ollama: https://ollama.com/download
# Run: ollama pull llama2 (or any supported model)
# Start server: ollama serve (default: http://localhost:11434)
# Supported models: llama2, mistral, phi, codellama, llama3, etc.
# No API key required - runs locally on your machine
OLLAMA_BASE_URL=http://localhost:11434
OLLAMA_MODEL=llama2
OLLAMA_TIMEOUT_SECONDS=120

# Common AI Settings
# Maximum retry attempts for AI API calls
AI_MAX_RETRIES=3
# Timeout for AI API calls in seconds
AI_TIMEOUT_SECONDS=60

# ============================================================================
# Storage Configuration (Phase 2)
# Required for document upload feature
# ============================================================================

# Storage backend: local or s3
STORAGE_BACKEND=local

# Local storage configuration
# Path where uploaded documents will be stored
STORAGE_PATH=./documents

# AWS S3 Configuration (for production)
# S3_BUCKET=opendeck-documents
# S3_REGION=us-east-1
# AWS_ACCESS_KEY_ID=your-access-key
# AWS_SECRET_ACCESS_KEY=your-secret-key

# Maximum file size in bytes (default: 10MB = 10485760)
MAX_UPLOAD_SIZE_BYTES=10485760

# Maximum number of files per upload (default: 10)
MAX_FILES_PER_UPLOAD=10

# ============================================================================
# Background Processing (Phase 2 - Celery & Redis)
# Required for asynchronous document processing
# ============================================================================

# Redis Configuration
# Redis is used for Celery task queue and result backend
REDIS_URL=redis://localhost:6379/0

# Celery Configuration
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/1

# Celery worker concurrency (number of worker processes)
CELERY_WORKER_CONCURRENCY=2

# Celery task timeout in seconds (default: 600 = 10 minutes)
CELERY_TASK_TIMEOUT=600

# AWS SQS Configuration (alternative to Redis for production)
# SQS_QUEUE_URL=https://sqs.us-east-1.amazonaws.com/your-account-id/opendeck-tasks

# ============================================================================
# Rate Limiting
# ============================================================================

# Maximum API requests per minute per user (default: 60)
RATE_LIMIT_PER_MINUTE=60

# Maximum document uploads per hour per user (default: 5)
UPLOAD_RATE_LIMIT_PER_HOUR=5

# ============================================================================
# Feature Flags (Optional)
# ============================================================================

# Enable document upload and AI flashcard generation (Phase 2)
ENABLE_DOCUMENT_UPLOAD=true

# Enable malware scanning for uploaded files
ENABLE_MALWARE_SCANNING=false

# Enable OCR for scanned documents (future feature)
ENABLE_OCR=false

# ============================================================================
# Monitoring & Observability (Optional)
# ============================================================================

# Sentry DSN for error tracking
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# Enable structured logging with JSON output
ENABLE_JSON_LOGGING=false

# ============================================================================
# Development & Testing
# ============================================================================

# Enable debug mode (shows detailed error traces)
DEBUG=false

# Database pool size (for load testing)
DB_POOL_SIZE=10

# Database max overflow (additional connections beyond pool size)
DB_MAX_OVERFLOW=20
