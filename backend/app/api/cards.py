"""Flashcard API Endpoints"""

from fastapi import APIRouter, HTTPException, status, Query
from app.schemas.card import CardCreate, CardUpdate, CardResponse, CardListResponse
from app.api.dependencies import CurrentUser, CardRepoDepends, DeckRepoDepends
from app.core.models import Card

router = APIRouter(tags=["Flashcards"])


@router.get("/decks/{deck_id}/cards", response_model=CardListResponse)
async def list_cards_in_deck(
    deck_id: str,
    current_user: CurrentUser,
    card_repo: CardRepoDepends,
    deck_repo: DeckRepoDepends,
    limit: int = Query(100, ge=1, le=100, description="Maximum number of results"),
    offset: int = Query(0, ge=0, description="Number of results to skip"),
) -> CardListResponse:
    """
    List all cards in a deck.

    Args:
        deck_id: Deck identifier
        current_user: Authenticated user
        card_repo: Card repository dependency
        deck_repo: Deck repository dependency
        limit: Maximum number of results (1-100)
        offset: Pagination offset

    Returns:
        Paginated list of cards

    Raises:
        HTTPException: If deck not found or access denied
    """
    # Verify deck exists and user has access
    deck = deck_repo.get(deck_id, current_user.id)
    if not deck:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Deck not found",
        )

    cards = card_repo.list_by_deck(deck_id, limit=limit, offset=offset)
    total = deck.card_count

    return CardListResponse(
        items=[CardResponse.model_validate(card) for card in cards],
        total=total,
        limit=limit,
        offset=offset,
    )


@router.get("/cards/{card_id}", response_model=CardResponse)
async def get_card(
    card_id: str,
    current_user: CurrentUser,
    card_repo: CardRepoDepends,
    deck_repo: DeckRepoDepends,
) -> CardResponse:
    """
    Get a single card by ID.

    Args:
        card_id: Card identifier
        current_user: Authenticated user
        card_repo: Card repository dependency
        deck_repo: Deck repository dependency

    Returns:
        Card details

    Raises:
        HTTPException: If card not found or access denied
    """
    card = card_repo.get(card_id)

    if not card:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Card not found",
        )

    # Verify user has access to the deck
    deck = deck_repo.get(card.deck_id, current_user.id)
    if not deck:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Card not found",
        )

    return CardResponse.model_validate(card)


@router.post("/decks/{deck_id}/cards", response_model=CardResponse, status_code=status.HTTP_201_CREATED)
async def create_card(
    deck_id: str,
    card_data: CardCreate,
    current_user: CurrentUser,
    card_repo: CardRepoDepends,
    deck_repo: DeckRepoDepends,
) -> CardResponse:
    """
    Create a new card in a deck.

    Args:
        deck_id: Deck identifier
        card_data: Card creation data
        current_user: Authenticated user
        card_repo: Card repository dependency
        deck_repo: Deck repository dependency

    Returns:
        Created card

    Raises:
        HTTPException: If deck not found or access denied
    """
    # Verify deck exists and user has access
    deck = deck_repo.get(deck_id, current_user.id)
    if not deck:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Deck not found",
        )

    card = Card(
        id="",  # Will be generated by repository
        deck_id=deck_id,
        question=card_data.question,
        answer=card_data.answer,
        source=card_data.source,
        source_url=card_data.source_url,
    )

    created_card = card_repo.create(card)
    return CardResponse.model_validate(created_card)


@router.put("/cards/{card_id}", response_model=CardResponse)
async def update_card(
    card_id: str,
    card_data: CardUpdate,
    current_user: CurrentUser,
    card_repo: CardRepoDepends,
    deck_repo: DeckRepoDepends,
) -> CardResponse:
    """
    Update an existing card.

    Args:
        card_id: Card identifier
        card_data: Card update data
        current_user: Authenticated user
        card_repo: Card repository dependency
        deck_repo: Deck repository dependency

    Returns:
        Updated card

    Raises:
        HTTPException: If card not found or access denied
    """
    card = card_repo.get(card_id)

    if not card:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Card not found",
        )

    # Verify user has access to the deck
    deck = deck_repo.get(card.deck_id, current_user.id)
    if not deck:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Card not found",
        )

    # Update only provided fields
    if card_data.question is not None:
        card.question = card_data.question
    if card_data.answer is not None:
        card.answer = card_data.answer
    if card_data.source is not None:
        card.source = card_data.source
    if card_data.source_url is not None:
        card.source_url = card_data.source_url

    updated_card = card_repo.update(card)
    return CardResponse.model_validate(updated_card)


@router.delete("/cards/{card_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_card(
    card_id: str,
    current_user: CurrentUser,
    card_repo: CardRepoDepends,
    deck_repo: DeckRepoDepends,
) -> None:
    """
    Delete a card.

    Args:
        card_id: Card identifier
        current_user: Authenticated user
        card_repo: Card repository dependency
        deck_repo: Deck repository dependency

    Raises:
        HTTPException: If card not found or access denied
    """
    card = card_repo.get(card_id)

    if not card:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Card not found",
        )

    # Verify user has access to the deck
    deck = deck_repo.get(card.deck_id, current_user.id)
    if not deck:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Card not found",
        )

    card_repo.delete(card_id)
