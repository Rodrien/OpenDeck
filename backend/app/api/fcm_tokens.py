"""
FCM Token Management API Endpoints

Endpoints for registering and managing Firebase Cloud Messaging tokens.
"""

import logging
from datetime import datetime
from fastapi import APIRouter, HTTPException, status

from app.schemas.fcm_token import FCMTokenCreate, FCMTokenResponse
from app.core.models import UserFCMToken
from app.api.dependencies import CurrentUser, FCMTokenRepoDepends


logger = logging.getLogger(__name__)

router = APIRouter(prefix="/fcm-tokens", tags=["FCM Tokens"])


@router.post(
    "",
    response_model=FCMTokenResponse,
    status_code=status.HTTP_201_CREATED,
    summary="Register FCM Token",
)
async def register_fcm_token(
    token_data: FCMTokenCreate,
    current_user: CurrentUser,
    token_repo: FCMTokenRepoDepends,
) -> FCMTokenResponse:
    """
    Register or update FCM token for current user.

    If the token already exists, it will be reactivated and last_used_at will be updated.
    This endpoint should be called:
    - After successful login
    - When the FCM token is refreshed by the browser
    - When notification permission is granted

    Args:
        token_data: FCM token registration data
        current_user: Authenticated user from JWT
        token_repo: FCM token repository

    Returns:
        Registered FCM token information

    Raises:
        HTTPException: If token registration fails
    """
    try:
        # Create domain model
        token = UserFCMToken(
            id="",  # Will be generated by repository
            user_id=current_user.id,
            fcm_token=token_data.fcm_token,
            device_type=token_data.device_type,
            device_name=token_data.device_name,
            is_active=True,
            created_at=datetime.utcnow(),
            updated_at=datetime.utcnow(),
            last_used_at=datetime.utcnow(),
        )

        # Create or update token
        created_token = token_repo.create(token)

        logger.info(
            f"FCM token registered for user {current_user.id} "
            f"(device: {token_data.device_type})"
        )

        return FCMTokenResponse.model_validate(created_token)

    except ValueError as e:
        logger.error(f"Invalid FCM token data: {e}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e),
        )

    except Exception as e:
        logger.error(f"Failed to register FCM token: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to register FCM token",
        )


@router.delete(
    "/{token_id}",
    status_code=status.HTTP_204_NO_CONTENT,
    summary="Unregister FCM Token",
)
async def unregister_fcm_token(
    token_id: str,
    current_user: CurrentUser,
    token_repo: FCMTokenRepoDepends,
) -> None:
    """
    Unregister FCM token (mark as inactive).

    This endpoint should be called when:
    - User logs out
    - User revokes notification permission
    - Frontend detects token is no longer valid

    Args:
        token_id: ID of the token to unregister
        current_user: Authenticated user from JWT
        token_repo: FCM token repository

    Raises:
        HTTPException: If token not found or doesn't belong to user
    """
    try:
        # Verify token exists and belongs to user
        token = token_repo.get(token_id)
        if not token:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Token not found",
            )

        if token.user_id != current_user.id:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Not authorized to unregister this token",
            )

        # Deactivate token
        token_repo.deactivate_token(token_id)

        logger.info(f"FCM token {token_id} deactivated for user {current_user.id}")

    except HTTPException:
        raise

    except Exception as e:
        logger.error(f"Failed to unregister FCM token: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to unregister FCM token",
        )


@router.get(
    "/my-tokens",
    response_model=list[FCMTokenResponse],
    summary="Get My FCM Tokens",
)
async def get_my_tokens(
    current_user: CurrentUser,
    token_repo: FCMTokenRepoDepends,
) -> list[FCMTokenResponse]:
    """
    Get all FCM tokens registered for current user.

    Useful for displaying registered devices in user settings.

    Args:
        current_user: Authenticated user from JWT
        token_repo: FCM token repository

    Returns:
        List of user's FCM tokens (both active and inactive)

    Raises:
        HTTPException: If retrieval fails
    """
    try:
        tokens = token_repo.get_by_user(current_user.id)
        return [FCMTokenResponse.model_validate(t) for t in tokens]

    except Exception as e:
        logger.error(f"Failed to retrieve FCM tokens: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to retrieve FCM tokens",
        )
