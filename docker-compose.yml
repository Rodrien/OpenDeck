version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: opendeck-db
    environment:
      POSTGRES_DB: opendeck
      POSTGRES_USER: opendeck_user
      POSTGRES_PASSWORD: opendeck_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U opendeck_user -d opendeck"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - opendeck-network

  # Redis for Celery broker and result backend
  redis:
    image: redis:7-alpine
    container_name: opendeck-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - opendeck-network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: opendeck-backend
    environment:
      - ENV=development
      - LOG_LEVEL=INFO
      - SECRET_KEY=dev-secret-key-change-in-production
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
      - DATABASE_URL=postgresql://opendeck_user:opendeck_pass@db:5432/opendeck
      - DB_BACKEND=postgres
      - CORS_ORIGINS=http://localhost:4200,http://localhost:80
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - STORAGE_BACKEND=local
      - STORAGE_PATH=/app/storage/documents
      # AI Provider Configuration (set your API key)
      - AI_PROVIDER=anthropic
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ANTHROPIC_MODEL=claude-3-5-sonnet-20241022
      # Alternative: Use OpenAI
      # - AI_PROVIDER=openai
      # - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - OPENAI_MODEL=gpt-4
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/app:/app/app  # Mount for hot reload in development
      - ./backend/scripts:/app/scripts
      - ./cards:/app/cards
      - ./backend/alembic/versions:/app/alembic/versions
      - document_storage:/app/storage
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - opendeck-network

  # Celery Worker for background processing
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: opendeck-celery-worker
    environment:
      - ENV=development
      - LOG_LEVEL=INFO
      - SECRET_KEY=dev-secret-key-change-in-production
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
      - DATABASE_URL=postgresql://opendeck_user:opendeck_pass@db:5432/opendeck
      - DB_BACKEND=postgres
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - STORAGE_BACKEND=local
      - STORAGE_PATH=/app/storage/documents
      # AI Provider Configuration (set your API key)
      - AI_PROVIDER=anthropic
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ANTHROPIC_MODEL=claude-3-5-sonnet-20241022
      # Alternative: Use OpenAI
      # - AI_PROVIDER=openai
      # - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - OPENAI_MODEL=gpt-4
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/app:/app/app
      - ./backend/scripts:/app/scripts
      - document_storage:/app/storage
    command: celery -A app.workers.celery_app worker --loglevel=info --concurrency=2
    networks:
      - opendeck-network

  # Angular Frontend
  frontend:
    build:
      context: ./opendeck-portal
      dockerfile: Dockerfile
    container_name: opendeck-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    environment:
      - API_URL=http://backend:8000
    networks:
      - opendeck-network

volumes:
  postgres_data:
  redis_data:
  document_storage:

networks:
  opendeck-network:
    driver: bridge
